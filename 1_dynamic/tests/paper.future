class Service {
  Sensor sensor; 
  Proxy proxy;
  void Service(int val) { // constructor
    sensor = new Sensor(); 
    proxy = new Proxy(val);
  }
  void subscribe(Client cl) { 
    proxy.add(cl); 
  } // sync. call
  void process() {
    while (true) {
      !Event future = sensor!detectEvent();
      proxy!publish(future);
      // async. call
      await future?;
    }
  }
}

class Proxy {
  List<Client> myClients;
  Proxy nextProxy;
  Event ev; int limit;
  void Proxy(int k) { // constructor
    limit = k; myClients = new List(); nextProxy = null;
  }

 void add(Client cl) {
    if (myClients.length < limit) {
      myClients.add(cl); 
    } else { 
      if (nextProxy == null) {
        nextProxy = new Proxy(limit);
      }
      nextProxy.add(cl); 
    }
  }
  void publish(!Event future) {
    await future?;
    if (nextProxy != null) {
      nextProxy!publish(future);
    }
    ev = future.get();
    for (Client client : myClients) {
      client!signal(ev);
    }
  } // notify clients
}

